# -*- coding: utf8 -*-

###########################################################################
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################

# copyright (c) Laurent Claessens, 2009-2016
# email: laurent@claessens-donadello.eu

import os

from sage.all import numerical_approx

import SmallComputations
from Separator import Separator, SeparatorList
from GlobalVariables import global_vars
from Utilities import latinize
from Utilities import newlengthName
from Utilities import ensure_unicode


def add_latex_line_entete(truc,position=""):
    from Picture import Picture
    from Figure import Figure
    if position == "" :
        if isinstance(truc,Picture):
            position="ENTETE PSPICTURE"
        if isinstance(truc,Figure):
            position="ENTETE FIGURE"
    truc.add_latex_line("% This file is automatically generated by phystricks",position)
    truc.add_latex_line("% See the documentation ",position)
    truc.add_latex_line("% http://student.ulb.ac.be/~lclaesse/phystricks-doc.pdf ",position)
    truc.add_latex_line("% http://student.ulb.ac.be/~lclaesse/phystricks-documentation/_build/html/index.html ",position)
    truc.add_latex_line("% and the projects phystricks and phystricks-doc at ",position)
    truc.add_latex_line("% https://github.com/LaurentClaessens/phystricks",position)

class Figure(object):
    r"""
    This is not exactly the 'figure' in the LaTeX sense of the term since it also contains informations about bounding boxes.

    The method `figure.no_figure()` makes disappear the \begin{figure} ... \end{figure}. In this case the LaTeX code of the class figure contains the informations about the bounding boxes and a if/then for inclusion of pspicture or \includegraphics

    - `self.newwriteName` is the name that will be given to LaTeX in ``\newwrite{...}``. This is not the
                name of the file in which the data is written.
    - `self.interWriteFile` is the name of the file in which the data will be written.
    """
    def __init__(self,caption,name,filename,script_filename):
        self.script_filename=script_filename
        self.caption = caption
        self.name = name
        self.xunit = 1
        self.yunit = 1
        self.figure_environment=True
        self.code = []
        self.record_subfigure = []
        self.record_pspicture=[]
        self.child_pspictures=[]

        self.send_noerror = False
        self.language="tikz"


        self.specific_needs=""
        # TODO : specific_needs should be a list of specific_need that is a class.
        # The idea is to leave to the user the control if the command has to be included in the file 
        # which creates the png and in the "final" file independently.

        # Filenames
        # filename.from_here() is the filename of the produced file
        # given relatively to the current directory, that is 
        # relatively to the directory where the picture source is.

        # filename.from_main() is the filename of the produced file
        # given relatively to the main latex directory, that is
        # relatively to where LaTeX will see it.

        from Utilities import SubdirectoryFilenames
        self.filename=SubdirectoryFilenames(filename)

        #self.fichier = SmallComputations.Fichier(self.filename)
        
        # This intermediate file will contain the comment of the pspict(s) for the sake of tests.  
        self.comment_filename=self.filename.from_here().replace(".pstricks",".comment")        

        # The order of declaration is important, because it is recorded in the Separator.number attribute.
        self.separator_list=SeparatorList()
        self.separator_list.new_separator("ENTETE FIGURE")
        self.separator_list.new_separator("SPECIFIC_NEEDS")
        self.separator_list.new_separator("HATCHING_COMMANDS")
        self.separator_list.new_separator("BEFORE SUBFIGURES")
        self.separator_list.new_separator("SUBFIGURES")
        self.separator_list.new_separator("AFTER SUBFIGURES")
        self.separator_list.new_separator("DEFAULT")
        self.separator_list.new_separator("BEFORE PSPICTURE")
        self.separator_list.new_separator("PSPICTURE")
        self.separator_list.new_separator("AFTER PSPICTURE")
        # the separators 'BEFORE SUBFIGURE' and 'AFTER ALL' will not 
        # be written in the case when self.figure_environment=False.

        # "AFTER ALL" is for caption and \end{figure} 
        self.separator_list.new_separator("AFTER ALL") 
        add_latex_line_entete(self)
        self.add_latex_line("\\begin{figure}[ht]","BEFORE SUBFIGURES")
        self.add_latex_line("\centering","BEFORE SUBFIGURES")
    def no_figure(self):
        self.figure_environment=False
    def rotation(self,angle):
        self.rotation_angle=angle
    def new_subfigure(self,caption,name=None):
        """
        Create a subfigure in the figure and return it.

        The end-user should use this instead of append_subfigure
        """
        if name==None:
            number=len(self.record_subfigure)
            name="sub"+latinize(str(number))
        ssfig=SubFigure(caption,self.name+"ss"+name)
        ssfig.mother=self
        ssfig.figure_mother=self
        self._append_subfigure(ssfig)
        return ssfig
    def _append_subfigure(self,ssFig):
        self.record_subfigure.append(ssFig)
        suffixe = "ssFig"+str(len(self.record_subfigure))
        if not ssFig.name:
            ssFig.name=self.name+suffixe
        print r"See also the subfigure \ref{%s}"%ssFig.name
    def new_pspicture(self,name=None,pspict=None):
        if name==None:
            number=len(self.record_pspicture)
            name="sub"+latinize(str(number))
        if pspict==None:
            from Picture import Picture
            pspict=Picture("FIG"+self.name+"PICT"+name)

        pspict.figure_mother=self
        self._add_pspicture(pspict)
        return pspict
    def add_latex_line(self,ligne,separator_name="DEFAULT"):
        self.separator_list[separator_name].add_latex_line(ligne)
    def _add_pspicture(self,pspict):
        pspict.mother=self
        pspict.figure_mother=self
        self.record_pspicture.append(pspict)
    def comments(self):
        a=[]
        for pspict in self.child_pspictures:
            comment=ensure_unicode(pspict.comment)
            if comment != "":
                a.append("Comment : "+comment)
        return "\n".join(a)
    def LaTeX_lines(self):
        """
        Return the lines to be included in your LaTeX file.
        """
        a=[]
        a.append(self.comments())
        from latex_to_be import pseudo_caption
        if self.figure_environment:
            a.append("The result is on figure \\ref{"+self.name+"}. % From file "+self.script_filename)
            # The pseudo_caption is changed to the function name later.
            a.append("\\newcommand{"+self.caption+"}{"+pseudo_caption+"}")
            a.append("\\input{%s}"%(self.filename.from_main()))
        else :
            text="""\\begin{center}
   INCLUSION
\end{center}""".replace("INCLUSION","\\input{%s}"%(self.filename.from_main()))
            if len(self.record_pspicture)==1:
                pspict=self.record_pspicture[0]
                visual_xsize=pspict.visual_xsize()      # By the way, this is a reason why we cannot do this before to have
                                                        # concluded the picture.
                text=text.replace("WIDTH",str(numerical_approx(visual_xsize,digits=3))+"cm")
            a.append(text)
        text = "\n".join(a)
        return text
        
    def conclude(self):
        for pspict in self.record_pspicture :
            inter_file =  pspict.auxiliary_file.interWriteFile.from_here()
            if not os.path.isfile(inter_file):
                with open(inter_file,"w") as f:
                    f.write("default:content-")
        
            pspict.add_latex_line(pspict.auxiliary_file.open_latex_code(),"OPEN_WRITE_AND_LABEL")
            self.add_latex_line(pspict.latex_code(),"PSPICTURE")

            # For the following big stuff, see the position 170321508
            def_length_tex=r"""                 \makeatletter
% If hatchspread is not defined, we define it
\ifthenelse{\value{defHatch}=0}{
\setcounter{defHatch}{1}
\newlength{\hatchspread}%
\newlength{\hatchthickness}%
}{}
               \makeatother               """

            def_pattern_tex=r"""               \makeatletter
\ifthenelse{\value{defPattern}=0}{
\setcounter{defPattern}{1}
\pgfdeclarepatternformonly[\hatchspread,\hatchthickness]% variables
   {custom north west lines}% name
   {\pgfqpoint{-2\hatchthickness}{-2\hatchthickness}}% lower left corner
   {\pgfqpoint{\dimexpr\hatchspread+2\hatchthickness}{\dimexpr\hatchspread+2\hatchthickness}}% upper right corner
   {\pgfqpoint{\hatchspread}{\hatchspread}}% tile size
   {% shape description
    \pgfsetlinewidth{\hatchthickness}
    \pgfpathmoveto{\pgfqpoint{0pt}{\hatchspread}}
    \pgfpathlineto{\pgfqpoint{\dimexpr\hatchspread+0.15pt}{-0.15pt}}
        \pgfusepath{stroke}
   }
   }{}
   \makeatother               """

            if pspict.language=="tikz":
                self.add_latex_line(def_length_tex,"HATCHING_COMMANDS")
                self.add_latex_line(def_pattern_tex,"HATCHING_COMMANDS")

            if global_vars.perform_tests:
                TestPspictLaTeXCode(pspict).test()
                
        self.add_latex_line(self.specific_needs,"SPECIFIC_NEEDS")

        if not global_vars.special_exit() :
            if self.language=="pstricks":
                self.add_latex_line("\psset{xunit=1,yunit=1}","BEFORE SUBFIGURES")


        for f in self.record_subfigure :
            self.add_latex_line("\subfigure["+f.caption+"]{%","SUBFIGURES")
            self.add_latex_line(f.subfigure_code(),"SUBFIGURES")
            self.add_latex_line("\label{%s}"%f.name,"SUBFIGURES")
            self.add_latex_line("}                  % Closing subfigure "+str(self.record_subfigure.index(f)+1),"SUBFIGURES")
            self.add_latex_line("%","SUBFIGURES")

            for pspict in f.record_pspicture:
                pspict.add_latex_line(pspict.auxiliary_file.open_latex_code(),"OPEN_WRITE_AND_LABEL")
                pspict.add_latex_line(pspict.auxiliary_file.latex_code(),"WRITE_AND_LABEL")
                pspict.add_latex_line(pspict.auxiliary_file.close_latex_code(),"CLOSE_WRITE_AND_LABEL")

        after_all=r"""\caption{%s}\label{%s}
            \end{figure}
            """%(self.caption,self.name)
        self.add_latex_line(after_all,"AFTER ALL")
        if self.figure_environment:
           self.contenu = self.separator_list.code().replace("\n\n","\n")
        else :
           self.contenu = self.separator_list.code(not_to_be_used=["BEFORE SUBFIGURES","AFTER ALL"]).replace("\n\n","\n")
        self.contenu=ensure_unicode(self.contenu)
    def write_the_file(self):
        """
        Write the figure in the file.

        Do not write if we are testing.
        It also remove the tikz externalize file.
        """
        import codecs
        to_be_written=self.contenu              # self.contenu is created in self.conclude
        if not global_vars.perform_tests :
            with codecs.open(self.filename.from_here(),"w",encoding="utf8") as f:
                f.write(to_be_written)
        print "--------------- For your LaTeX file ---------------"
        print(self.LaTeX_lines())
        print "---------------------------------------------------"
        # One only sends the "no error" signal if we are performing a list of tests.

        with codecs.open(self.comment_filename,"w",encoding='utf8') as f:
            f.write(self.comments())

        if self.send_noerror :
            raise PhystricksNoError(self)

class SubFigure(object):
    """
    This is a subfigure.

    If no label are given, a default one will be set when included in the figure.
    
    EXAMPLES

    .. literalinclude:: phystricksSubFigure.py
    .. image:: Picture_FIGLabelFigSubFiguressLabelssFigFirstPICTFirstPoint-for_eps.png
    .. image:: Picture_FIGLabelFigSubFiguressLabelssFigSecondPICTSecondPoint-for_eps.png
    .. image:: Picture_FIGLabelFigSubFiguressLabelssFigThirdPICTthirdPoint-for_eps.png
    """
    def __init__(self,caption,name=None):
        self.caption = caption
        self.name = name
        self.record_pspicture=[]
        self.mother=None
    def add_latex_line(self,ligne,separator_name):
        self.mother.add_latex_line(ligne,separator_name)
    def new_pspicture(self,name=None,pspict=None):
        if name==None:
            number=len(self.record_pspicture)
            name="sub"+latinize(str(number))
        if pspict is None :
            from Picture import Picture
            pspict=Picture("FIG"+self.name+"PICT"+name)
        pspict.mother=self
        pspict.figure_mother=self.mother    # The mother of a pspict inside a subfigure is the figure (not the subfigure)
        pspict.subfigure_mother=self
        self._add_pspicture(pspict)
        return pspict
    def subfigure_code(self):
        a=[]
        for pspict in self.record_pspicture :
            a.append(pspict.latex_code())
        return "\n".join(a)
    def _add_pspicture(self,pspicture):
        self.record_pspicture.append(pspicture)
